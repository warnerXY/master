package com.vivebest.erp.control;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;

import org.junit.runners.Parameterized.Parameter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.vivebest.erp.entity.Account;
import com.vivebest.erp.entity.Customer;
import com.vivebest.erp.entity.Page;
import com.vivebest.erp.entity.Teller;
import com.vivebest.erp.service.AccountService;
import com.vivebest.erp.service.AuthorityService;
import com.vivebest.erp.service.CustomerService;
import com.vivebest.erp.service.impl.CustomerServiceImpl;
import com.vivebest.erp.utils.MD5;

@Controller
@RequestMapping("/customer")
public class CustomerControl {

	@Autowired
	private CustomerService customerService;

	@Autowired
	private AccountService accountService;

	@Autowired
	private AuthorityService authorityService;

	/**
	 * 客户注册
	 * 
	 * @param model
	 * @param cusName
	 * @param cusPassword
	 * 
	 */
	@RequestMapping(value = "/addCustomer", method = RequestMethod.POST)
	public String registerCustomer(Model model, HttpServletRequest req) {
		String cusName = req.getParameter("cusName");
		String password = req.getParameter("cusPassword");
		String phone = req.getParameter("cusPhone");
		String email = req.getParameter("cusEmail");
		String cusAddress = req.getParameter("cusAddress");
		String cusIdCard = req.getParameter("cusIdCard");
		Customer customer = new Customer();
		customer.setCusName(cusName);
		customer.setCusPassword(MD5.encode(password.trim()));
		customer.setCusPhone(phone);
		customer.setCusEmail(email);
		customer.setCusAddress(cusAddress);
		customer.setCusIdCard(cusIdCard);
		customer.setCusCreateTime(new Date());
		customer.setCusState(true);
		HttpSession session = req.getSession();
		Teller teller = (Teller) session.getAttribute("teller");
		customer.settId(teller.gettId());
		customer.setIsDelete(true);
		boolean ok = customerService.addCustomer(customer);
		System.out.println(customer);
		if (ok) {
			model.addAttribute("customer", customer);
			model.addAttribute("message", "注册成功");
			return "teller/home";
		} else {
			model.addAttribute("message", "注册失败");
			return "teller/home";
		}
	}

	/**
	 * 客户登陆
	 * 
	 * @param model
	 * @param cusName
	 * @param cusPassword
	 */

	@RequestMapping(value = "/customerLogin", method = RequestMethod.POST)
	@ResponseBody
	public String customerLogin(@RequestParam String cusName,
			@RequestParam String cusPassword, HttpSession session) {
		// 判断柜员是否登陆
		Teller teller = (Teller) session.getAttribute("teller");
		if (teller == null) {
			// 柜员信息失效
			return "0";
		} else {
			Customer customer = new Customer();
			customer.setCusPhone(cusName);
			;
			customer.setCusPassword(MD5.encode(cusPassword.trim()));
			Customer newCu = customerService.customerLogin(customer);
			if (newCu != null) {
				if (newCu.getIsDelete() && newCu.getCusState()) {
					// 修改用户登陆时间
					session.setAttribute("customer", newCu);
					newCu.setCusLoginTime(new Date());
					customerService.updateCustomer(newCu);
					// 存在登陆成功
					System.out.println(">>>>>>>>>>>>修改成功");
					return "1";
				} else {
					// 不存在
					System.out.println(">>>>>>>>>>>客户名失效");
					return "0";
				}
			} else {
				System.out.println(">>>>>>>>>>>登陆失败");
				return "0";
			}
		}
	}

	/**
	 * 
	 * @param session
	 * @return
	 */
	@RequestMapping(value = "/customerLoginOut", method = RequestMethod.POST)
	@ResponseBody
	public String customerLoginOut(HttpSession session) {
		Customer customer = (Customer) session.getAttribute("customer");
		Teller teller = (Teller) session.getAttribute("teller");
		if (customer == null && teller == null) {
			// 用户失效重新登陆
			return "1";
		} else {
			// 查询客户处理事件数，等待写
			session.removeAttribute("customer");
			return "0";
		}
	}

	/**
	 * 校准手机号
	 * 
	 * @param cusPhone
	 * @param session
	 * @return
	 */
	@RequestMapping(value = "/checkPhone", method = RequestMethod.POST)
	@ResponseBody
	public String checkPhone(@RequestParam String cusPhone, HttpSession session) {

		Customer customer = new Customer();
		customer.setCusPhone(cusPhone);
		Customer cus = customerService.getCustomer(customer);
		System.out.println(cus);
		if (cus == null) {
			return "1";
		} else {
			return "0";
		}
	}

	/**
	 * 校准邮件
	 * 
	 * @param cusEmail
	 * @param session
	 * @return
	 */
	@RequestMapping(value = "/checkEmail", method = RequestMethod.POST)
	@ResponseBody
	public String checkEmail(@RequestParam String cusEmail, HttpSession session) {

		Customer customer = new Customer();
		customer.setCusEmail(cusEmail);
		Customer cus = customerService.getCustomer(customer);
		System.out.println(cus);
		if (cus == null) {
			return "1";
		} else {
			return "0";
		}
	}

	@RequestMapping(value = "/check_againpassword", method = RequestMethod.POST)
	@ResponseBody
	public String check_againpassword(@RequestParam String cusPassword,
			@RequestParam String cusPassword_1, HttpSession session) {

		if (cusPassword.equals(cusPassword_1)) {
			return "1";
		} else {
			return "0";
		}
	}

	/**
	 * 修改客户信息
	 * 
	 * @param model
	 * @param cusId
	 * @param cusName
	 * @param cusPassword
	 * @param phone
	 * @param email
	 * @param cusIdCard
	 * @param cusAddress
	 * @return
	 */
	@RequestMapping(value = "/updateCustomer", method = RequestMethod.POST)
	public String updateCustomer(Model model, @RequestParam String cusId,
			@RequestParam String cusName, @RequestParam String cusPassword,
			@RequestParam String cusPhone, @RequestParam String cusEmail,
			@RequestParam String cusIdCard, @RequestParam String cusAddress,
			@RequestParam String cusState) {
		Customer customer = new Customer();
		int cid = Integer.parseInt(cusId);
		customer.setCusId(cid);
		System.out.println(cid);
		customer.setCusName(cusName);
		customer.setCusPassword(cusPassword);
		customer.setCusPhone(cusPhone);
		customer.setCusEmail(cusEmail);
		customer.setCusIdCard(cusIdCard);
		customer.setCusAddress(cusAddress);
		if ("true".equals(cusState)) {
			customer.setCusState(true);
		} else if ("false".equals(cusState)) {
			customer.setCusState(false);
		}
		boolean ok = customerService.updateCustomer(customer);
		if (ok) {
			model.addAttribute("custoemr", customer);
			model.addAttribute("message", "客户修改信息成功");
			return "customer/base_customer";
		} else {
			model.addAttribute("message", "客户修改信息失败");
			return "customer/base_customer";
		}
	}

	/**
	 * 删除客户信息
	 * 
	 * @param model
	 * @param cusId
	 * @param isDelete
	 * @return
	 */
	@RequestMapping(value = "/deleteCustomer", method = RequestMethod.POST)
	public String deleteCustomer(Model model, @RequestParam String cusId,
			@RequestParam String isDelete) {
		Customer customer = new Customer();
		int cusid = Integer.parseInt(cusId);
		customer.setCusId(cusid);
		if ("true".equals(isDelete)) {
			customer.setCusState(true);
		} else if ("false".equals(isDelete)) {
			customer.setCusState(false);
		}
		boolean ok = customerService.deleteCustomer(customer);
		if (ok) {
			model.addAttribute("message", "删除成功");
			return "customer/deleteCustomer";
		} else {
			model.addAttribute("message", "删除失败");
			return "customer/deleteCustomer";
		}
	}

	/**
	 * 得到客户详细信息
	 * 
	 * @param model
	 * @param cusId
	 * @param isDelete
	 * @return
	 */
	@RequestMapping(value = "/showCustomer", method = RequestMethod.GET)
	public String showCustomer(Model model, HttpSession session) {
		Customer customer = (Customer) session.getAttribute("customer");
		Teller teller = (Teller) session.getAttribute("teller");
		List<Account> list = new ArrayList<>();
		if (customer == null && teller == null) {
			// 用户失效重新登陆
			return "1";
		} else {
			// 通过用户查询卡号
			list = accountService.getAccountsOfCustomer(customer.getCusId());
			model.addAttribute("list", list);
			return "customer/base_customer";
		}
	}

	/**
	 * 分页得到客户信息
	 * 
	 * @param model
	 * @param cusId
	 * @param isDelete
	 * @return
	 */
	@RequestMapping(value = "/customerlist.do", method = RequestMethod.GET)
	public String selectAllTransferInfo(HttpServletRequest req,
			Map<String, Object> map) {
		String pageNumber = req.getParameter("pageNumber");
		int pageSize = 5;
		Page<Customer> page = customerService.getPartCustomer(pageNumber,
				pageSize);
		// List<Customer> data = page.getData();
		System.out.println(page.toString());
		page.setPath("/bankERP/customer/customerlist.do?");
		map.put("page", page);
		return "back/customer_list";
	}

	/**
	 * 得到用户详细信息
	 * 
	 * @param model
	 * @param req
	 * @param rsp
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	@RequestMapping(value = "/getOneCustomer", method = RequestMethod.GET)
	public String getOneCustomer(Model model, HttpServletRequest req,
			HttpServletResponse rsp) throws UnsupportedEncodingException {
		req.setCharacterEncoding("utf-8");
		rsp.setCharacterEncoding("utf-8");
		String cusIds = req.getParameter("cusId");
		System.out.println(cusIds);
		if (cusIds != null) {
			System.out.println(cusIds);
			int cusId = Integer.parseInt(req.getParameter("cusId"));
			Customer customer = new Customer();
			// customer.setCusName(cusName);
			customer.setCusId(cusId);
			Customer cu = customerService.getCustomerByCid(customer);
			if (cu != null) {
				req.setAttribute("customer", cu);
				return "customer/getOneCustomer";
			} else {
				req.setAttribute("message", "无此用户");
				return "/back/customer_list";
			}
		} else {
			req.setAttribute("message", "用户id不能为空");
			return "/back/customer_list";
		}
	}

	/**
	 * 通过id得到客户信息进行详细查询
	 * 
	 * @param model
	 * @param req
	 * @param rsp
	 * @return
	 */
	@RequestMapping(value = "/get_customer", method = RequestMethod.GET)
	public String get_customer(Model model, HttpServletRequest req,
			HttpServletResponse rsp) {
		int cid = Integer.parseInt(req.getParameter("cusId"));
		Customer customer = new Customer();
		customer.setCusId(cid);
		Customer cu = customerService.getCustomerByCid(customer);
		System.out.println(cu);
		if (cu != null) {
			HttpSession session = req.getSession();
			session.setAttribute("customer", cu);
			return "customer/update_customer";
		} else {
			req.setAttribute("message", " 无此用户");
			return "customer/getOneCustomer";
		}
	}
}
