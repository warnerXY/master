package com.vivebest.erp.control;



import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.vivebest.erp.entity.Account;
import com.vivebest.erp.entity.Customer;
import com.vivebest.erp.entity.Teller;
import com.vivebest.erp.service.AccountService;
import com.vivebest.erp.service.CustomerService;
import com.vivebest.erp.utils.MD5;


@Controller
@RequestMapping("/customer")
public class CustomerControl {

	@Autowired		
	private CustomerService customerService;
	
	@Autowired
	private AccountService accountService;
	/**
	 * 客户注册
	 * @param model
	 * @param cusName
	 * @param cusPassword
	 * 
	 */
	@RequestMapping(value="/addCustomer",method=RequestMethod.POST)
	public String registerCustomer(Model model,HttpServletRequest req){
			String cusName=req.getParameter("cusName");
			String password=req.getParameter("cusPassword");
			String phone=req.getParameter("phone");
			String email=req.getParameter("email");
			String cusAddress=req.getParameter("cusAddress");
			String cusIdCard=req.getParameter("cusIdCard");
			Customer customer=new Customer();
			customer.setCusName(cusName);
			customer.setCusPassword(password);
			customer.setCusPhone(phone);
			customer.setCusEmail(email);
			customer.setCusAddress(cusAddress);
			customer.setCusIdCard(cusIdCard);
			customer.setCusCreateTime(new Date());
			int tid=Integer.parseInt(req.getParameter("tId"));
			customer.settId(tid);
			customer.setIsDelete(false);
			boolean ok=customerService.addCustomer(customer);
			System.out.println(customer);
			if (ok) {
				model.addAttribute("message", "注册成功");
				return "customer/add_customer";
			}else{
				model.addAttribute("message", "注册失败");
				return "customer/add_customer";
			}
	}
	/**
	 * 客户登陆
	 * @param model
	 * @param cusName
	 * @param cusPassword
	 */
	/*@RequestMapping(value="/loginCustomer",method=RequestMethod.POST)
	public String loginCustomer(Model model,@RequestParam String cusPhone,
			@RequestParam String cusPassword){
		Customer customer= new Customer();
		System.out.println(">>>>>>>>>>>>>>>>>");
		System.out.println(cusPhone);
		customer.setCusPhone(cusPhone);
		customer.setCusPassword(cusPassword);
		Customer cu=customerService.customerLogin(customer);
		System.out.println("=----------=======");
		System.out.println(cu);
		if (cu!=null) {
			boolean ok =customerService.updateCustomer(customer);
			if (customer.getCusState()==true) {
				model.addAttribute("state", "正常");
			}else{
				model.addAttribute("state", "非正常");
			}
			cu.setCusLoginTime(new Date());
			model.addAttribute("customer", cu);
			model.addAttribute("message", "登陆成功");
			return "customer/base_customer";
		}else{
			model.addAttribute("message", "登陆失败");
			return "customer/base_customer";	
		}
	}*/

	
	@RequestMapping(value="/customerLogin",method=RequestMethod.POST)
	@ResponseBody
	public String customerLogin(@RequestParam String cusName,@RequestParam String cusPassword,HttpSession session){
		//判断柜员是否登陆
		Teller teller=(Teller) session.getAttribute("teller");
		if(teller==null)
		{
			//柜员信息失效
			return "0";
		}
		else
		{
		Customer customer= new Customer();
		customer.setCusPhone(cusName);;
		customer.setCusPassword(MD5.encode(cusPassword.trim()));
		Customer newCu=customerService.customerLogin(customer);
		if (newCu!=null) {
			if(newCu.getIsDelete()&&newCu.getCusState())
			{
				//修改用户登陆时间
				session.setAttribute("customer", newCu);
				newCu.setCusLoginTime(new Date());
				customerService.updateCustomer(newCu);
				//存在登陆成功
				System.out.println(">>>>>>>>>>>>修改成功");
				return "1";
			}
			else 
			{
				//不存在
				System.out.println(">>>>>>>>>>>客户名失效");
				return "0";
			}
		}else{
			System.out.println(">>>>>>>>>>>登陆失败");
			  return "0";
		}
		}
	}
	
	@RequestMapping(value="/customerLoginOut",method=RequestMethod.POST)
	@ResponseBody
	public String customerLoginOut(HttpSession	session)
	{
		Customer customer=(Customer) session.getAttribute("customer");
		Teller teller=(Teller) session.getAttribute("teller");
		if(customer==null&&teller==null)
		{
			//用户失效重新登陆
			return "1";
		}
		else
		{
			//查询客户处理事件数，等待写
			session.removeAttribute("customer");
			return "0";
		}
	}

	/**
	 * 修改客户信息
	 * @param model
	 * @param cusId
	 * @param cusName
	 * @param cusPassword
	 * @param phone
	 * @param email
	 * @param cusIdCard
	 * @param cusAddress
	 * @return
	 */
	@RequestMapping(value="/updateCustomer",method=RequestMethod.POST)
	public String updateCustomer(Model model,@RequestParam String cusId,@RequestParam String cusName,
			@RequestParam String cusPassword,@RequestParam String phone,@RequestParam String email,
			@RequestParam String cusIdCard,@RequestParam String cusAddress,@RequestParam String cusState){
		Customer customer= new Customer();
		int cusid=Integer.parseInt(cusId);
		customer.setCusId(cusid);
		customer.setCusName(cusName);
		customer.setCusPassword(cusPassword);
		customer.setCusPhone(phone);
		customer.setCusEmail(email);
		customer.setCusIdCard(cusIdCard);
		customer.setCusAddress(cusAddress);
		if ("true".equals(cusState)) {
			customer.setCusState(true);	
		}else if("false".equals(cusState)){
			customer.setCusState(false);	
		}
		boolean ok=customerService.updateCustomer(customer);
		if (ok) {
			model.addAttribute("custoemr", customer);
			model.addAttribute("message", "修改成功");
			return "customer/updateCustomer";		
		}else{
			model.addAttribute("message", "修改失败");
			return "customer/updateCustomer";
		}
	}
	/**
	 * 删除客户信息
	 * @param model
	 * @param cusId
	 * @param isDelete
	 * @return
	 */
	@RequestMapping(value="/deleteCustomer",method=RequestMethod.POST)
	public String deleteCustomer(Model model,@RequestParam String cusId,
			@RequestParam String isDelete){
		Customer customer= new Customer();
		int cusid=Integer.parseInt(cusId);
		customer.setCusId(cusid);
		if ("true".equals(isDelete)) {
			customer.setCusState(true);	
		}else if("false".equals(isDelete)){
			customer.setCusState(false);	
		}
		boolean ok=customerService.deleteCustomer(customer);
		if (ok) {
			model.addAttribute("message", "删除成功");
			return "customer/deleteCustomer";		
		}else{
			model.addAttribute("message", "删除失败");
			return "customer/deleteCustomer";
		}
	}

	@RequestMapping(value="/showCustomer",method=RequestMethod.GET)
	public String showCustomer(Model model,HttpSession session)
	{
		Customer customer=(Customer) session.getAttribute("customer");
		Teller teller=(Teller) session.getAttribute("teller");
		List<Account> list=new ArrayList<>();
		if(customer==null&&teller==null)
		{
			//用户失效重新登陆
			return "1";
		}
		else
		{
			//通过用户查询卡号
			list=accountService.getAccountsOfCustomer(customer.getCusId());
			model.addAttribute("list", list);
			return "customer/base_customer";
		}
	}
}
