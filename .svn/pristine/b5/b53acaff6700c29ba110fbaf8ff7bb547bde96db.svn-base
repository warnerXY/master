package com.vivebest.erp.control;


import java.io.IOException;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.vivebest.erp.entity.Account;
import com.vivebest.erp.entity.Customer;
import com.vivebest.erp.entity.Teller;
import com.vivebest.erp.service.AccountService;
import com.vivebest.erp.utils.AccountUtils;
import com.vivebest.erp.utils.MD5;


@Controller
@RequestMapping("/account")
public class AccountControl {

	/**
	 * 使用model来设置参数，页面可以直接获取
	 * 
	 * @param user
	 * @param model
	 * @return
	 */
	@Autowired
	private AccountService accountService;
	

	@RequestMapping(value = "/loginSubmit", method = RequestMethod.POST)
	public String checkPasswordSubmit(Account account, Model model,HttpSession httpSession)
			throws ClassNotFoundException, SQLException, IOException {
		model.addAttribute("account", account);
		Boolean flag = accountService.checkAccountPassword(account);
		String result = null;
		if (flag) {
			result = "account/rightAccount";
			httpSession.setAttribute("accountinfo", account);
		}else{
			result = "account/wrongAccount";
		}
		return result;
	}


	@RequestMapping(value = "/getMoneySubmit", method = RequestMethod.POST)
	@ResponseBody
	public String getMoneySubmit(@RequestParam String acNumber,@RequestParam String money,@RequestParam String password,HttpSession session) {
		Customer customer=(Customer) session.getAttribute("customer");
		Teller teller=(Teller) session.getAttribute("teller");
		if(customer!=null){
			//putmoney
			Account account=new Account();
			account.setAcNumber(acNumber);
			
			String encodepassword = MD5.encode(password);
			account.setAcPassword(encodepassword);
			account.setAcNumber(acNumber);
			Boolean flag = accountService.checkAccountPassword(account);
			if(flag){
				Boolean flag1 = accountService.getMoney(account, new BigDecimal(
						money));
				if(flag1){
					return "1";
				}
				else{
					return "-2";
				}
			}
			else{
				return "-1";
			}
			
		}
		else if(teller==null&&customer==null)
		{
			return "0";
		}
		else
		{
			return "0";
		}
	}

	@RequestMapping(value = "/saveMoneySubmit", method = RequestMethod.POST)
	@ResponseBody
	public String saveMoneySubmit(@RequestParam String acNumber,@RequestParam String money,HttpSession session)
	{
		Customer customer=(Customer) session.getAttribute("customer");
		Teller teller=(Teller) session.getAttribute("teller");
		List<Account> list=new ArrayList<>();
		if(customer!=null){
			//putmoney
			Account account=new Account();
			account.setAcNumber(acNumber);
			accountService.saveMoney(account, new BigDecimal(money));
			//ok
			return "1";
		}
		else if(teller==null&&customer==null)
		{
			return "0";
		}
		else
		{
			return "0";
		}
	}

	@RequestMapping(value = "/transferAccountsSubmit", method = RequestMethod.POST)
	@ResponseBody
	public String transMoneySubmit(@RequestParam String acNumber,
			@RequestParam String objectNumber, @RequestParam String password,
			@RequestParam String transferMoney, HttpSession session) {
		Customer customer = (Customer) session.getAttribute("customer");
		Teller teller = (Teller) session.getAttribute("teller");
		List<Account> list = new ArrayList<>();
		if (customer != null) {
			// transfermoney
			Account account = new Account();
			String encodepassword = MD5.encode(password);
			account.setAcPassword(encodepassword);
			account.setAcNumber(acNumber);
			Boolean flag = accountService.checkAccountPassword(account);
			if(flag){
				Account objaccount = new Account();
				objaccount.setAcNumber(objectNumber);
				Boolean flag1 = accountService.updateTransferMoney(account, new BigDecimal(
						transferMoney), objaccount);
				if(flag1){
					return "1";
				}
				else{
					return "2";
				}
			}
			else{
				return "-1";
			}
		} else if (teller == null && customer == null) {
			return "0";
		} else {
			return "0";
		}
	}

	
	//跳转管理卡数界面
	@RequestMapping(value = "/forwardAccounts", method = RequestMethod.GET)
	public String forwardAccounts(HttpSession session,HttpServletRequest httpRequest)
	{
		Customer customer=(Customer) session.getAttribute("customer");
		Teller teller=(Teller) session.getAttribute("teller");
		List<Account> list=new ArrayList<>();
		List<Account> no_show=new ArrayList<>();
		if(customer!=null){
			//通过用户查询卡号
			list=accountService.getAccountsOfCustomer(customer.getCusId());
			//卡号屏蔽
			for(Account a:list)
			{
				a.setNoShowNumber(AccountUtils.transferString(a.getAcNumber()));
				no_show.add(a);
			}
			httpRequest.setAttribute("list", no_show);
			return "customer/show_customer_account";
		}
		else if(teller==null&&customer==null)
		{
			return "teller/home";
		}
		else
		{
			return "teller/home";
		}
	}
	
	//增加页面账号
	@RequestMapping(value = "/forwardaddAccount", method = RequestMethod.GET)
	public String forwardaddAccount(HttpSession session,HttpServletRequest httpRequest)
	{
		Customer customer=(Customer) session.getAttribute("customer");
		if(customer!=null){
			//跳转到注册卡号页面
			return "customer/reg_card";
		}
		else
		{
			return "teller/home";
		}
	}
	
	
	//自动生成卡号
	@RequestMapping(value = "/autoAccount", method = RequestMethod.POST)
	@ResponseBody
	public String autoAccount(Model model,HttpSession session,HttpServletRequest httpRequest)
	{
		long cardNum=0;
		Customer customer=(Customer) session.getAttribute("customer");
		Teller teller=(Teller) session.getAttribute("teller");
		List<Account> list=new ArrayList<>();
		if(customer!=null){
			//生成卡号
			Date d=new Date();
			SimpleDateFormat sd=new SimpleDateFormat("yyyyMMddHHmmss");
			String c=62260+sd.format(d);
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>C时间"+c);
			 cardNum=Long.valueOf(c);
			Account a=new Account();
			a.setAcNumber(c);
			
			if(accountService.selectFromAccount(a)!=null)
			{
				//有重复卡号再自动生成		
				sd=new SimpleDateFormat("yyyyMMddHHmmss");
				  c=62269+sd.format(d);
				  cardNum=Long.valueOf(c);
			}
			return String.valueOf(cardNum);
		}
		else if(teller==null&&customer==null)
		{
			return "0";
		}
		else
		{
			return "0";
		}
	}
	
	
	//注册卡号
	//自动生成卡号
		@RequestMapping(value = "/addCustomerAccount", method = RequestMethod.POST)
		@ResponseBody
		public String addCustomerAccount(@RequestParam String cusNumber,@RequestParam String address,@RequestParam String password,HttpSession session,HttpServletRequest httpRequest)
		{
			Customer customer=(Customer) session.getAttribute("customer");
			Teller teller=(Teller) session.getAttribute("teller");
			List<Account> list=new ArrayList<>();
			if(customer!=null){
				//注册
				Account account=new Account();
				account.setAcNumber(cusNumber);
				account.setAcCreateAddress(address);
				account.setAcPassword(MD5.encode(password.trim()));
				account.setAcBalence(new BigDecimal(0));
				account.setAcCreateTime(new Date());
				account.setCusId(customer.getCusId());
				account.setAcCurrency("CNY");
				account.settId(teller.gettId());
				account.setAcState(true);
				account.setIsDelete(true);
				accountService.insertToAccount(account);//插入数据库中
				return "1";
			}
			else if(teller==null&&customer==null)
			{
				return "0";
			}
			else
			{
				return "0";
			}
		}
	
		//业务操作
		@RequestMapping(value = "/forwardAction", method = RequestMethod.GET)
		public String forwardAction(@RequestParam String acNumber,HttpSession session,HttpServletRequest httpRequest)
		{
			Customer customer=(Customer) session.getAttribute("customer");
			Teller teller=(Teller) session.getAttribute("teller");
			List<Account> list=new ArrayList<>();
			if(customer!=null){
				//注册
				//获取卡的
				Account account=new Account();
				account.setAcNumber(acNumber);
				Account a=accountService.selectFromAccount(account);
				httpRequest.setAttribute("account", a);
				return "customer/action_customer_account";
			}
			else if(teller==null&&customer==null)
			{
				return "teller/login";
			}
			else
			{
				return "teller/login";
			}
		}
}
